@page "/"
@using System.Reflection
@inject NavigationManager NavigationManager
@implements IAsyncDisposable


<PageTitle>Index</PageTitle>
<div class="container" style="width:410px;">
    <h1>Battledots!</h1>
    <small>v. @version.ToString()</small>

    @if (!currentMatchInfo.MatchId.HasValue)
    {
        <div class="input-group">
            <input class="form-control" @bind="username" placeholder="Username" />
            <button class="btn btn-outline-primary" @onclick="JoinQueue" type="button" disabled="@(!IsConnected || isQueued)">
                <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true" hidden="@(!isQueued)"></span>
                @if (isQueued)
                {
                    <span>
                        Queued ...
                    </span>
                }
                else
                {
                    <span>
                        Join Queue
                    </span>
                }
            </button>
            <p class="text-danger" hidden="@(showError == false)">Username in use, please try a different username</p>
        </div>
    }
    else
    {
        <CascadingValue Value="@currentMatchInfo">
            <Gameboard HubConnection="hubConnection" ResetCallback="HandleReset" />
        </CascadingValue>
    }

</div>

@code {
    public CurrentMatchInfo currentMatchInfo = new CurrentMatchInfo();
    private HubConnection? hubConnection;

    private List<string> messages = new List<string>();

    private bool isQueued = false;
    private bool showError = false;

    private string? userInput;
    private string? messageInput;
    private string? username;

    Version version = typeof(Program).Assembly.GetName().Version;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .WithUrl(NavigationManager.ToAbsoluteUri("/battleshiphub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<Player?>("JoinQueueResponse", (player) =>
        {
            if (!player.HasValue)
            {
                showError = true;
                isQueued = false;
            }
            else
            {
                currentMatchInfo.Player = player.Value;
            }
            StateHasChanged();
        });


        hubConnection.On<Guid, GamePhase>("NotifyMatchFoundResponse", (matchId, phase) =>
        {
            currentMatchInfo.MatchId = matchId;
            currentMatchInfo.GamePhase = phase;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    public void HandleReset()
    {
        currentMatchInfo = new CurrentMatchInfo();
        isQueued = false;
        StateHasChanged();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    private async Task JoinQueue()
    {
        if (hubConnection is not null)
        {
            isQueued = true;
            showError = false;
            StateHasChanged();
            await hubConnection.SendAsync("JoinQueue", username);
        }
    }



    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}