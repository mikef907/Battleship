@page "/"
@using Battleship.WASM.Client.Models
@using Battleship.WASM.Shared

@inject NavigationManager NavigationManager
@implements IAsyncDisposable


<PageTitle>Index</PageTitle>
<div class="container">
    <h1>Battleship!</h1>
    @if (currentMatchInfo.GamePhase.HasValue)
    {
        <h5>Game Phase: @currentMatchInfo.GamePhase</h5>
    }

    @if (!currentMatchInfo.MatchId.HasValue)
    {
        <div>
            <input @bind="username" placeholder="Username" /><button @onclick="JoinQueue" disabled="@(!IsConnected || isQueued)">Join Queue</button>
            @if (isQueued)
            {
                <p>
                    Queue joined...waiting for match

                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </p>
            }

        </div>
    }
    else
    {
        <CascadingValue Value="@currentMatchInfo">
            <Gameboard HubConnection="hubConnection" />
        </CascadingValue>
    }

</div>


<style>
    .game-grid {
        display: grid;
        grid-template-columns: repeat(10, 1fr);
        grid-auto-rows: 4rem;
        max-width: 40rem;
    }

    .ship {
        height: 100%;
        width: 100%;
        border-radius: 30px;
    }

    .game-grid-cell {
        border-style: groove;
        border-width: 1px;
        height: 100%;
        width: 100%;
        z-index: 20;
    }

    .can-drop {
        border: 2px dotted green !important;
    }

    .no-drop {
        border: 2px dotted red !important;
    }

    .ship.Carrier {
        background-color: #ffbe0b;
    }

    .ship.Battleship {
        background-color: #fb5607;
    }

    .ship.Patrol_Boat {
        background-color: #ff006e;
    }

    .ship.Submarine {
        background-color: #8338ec;
    }

    .ship.Destroyer {
        background-color: #3a86ff;
    }
</style>

@code {
    public CurrentMatchInfo currentMatchInfo = new CurrentMatchInfo();
    private HubConnection? hubConnection;

    private List<string> messages = new List<string>();

    private bool isQueued = false;

    private string? userInput;
    private string? messageInput;
    private string? username;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .WithUrl(NavigationManager.ToAbsoluteUri("/battleshiphub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<Player>("JoinQueueResponse", (player) =>
        {
            currentMatchInfo.Player = player;
            Console.WriteLine(player);
        });

        hubConnection.On<Guid, GamePhase>("NotifyMatchFoundResponse", (matchId, phase) =>
        {
            Console.WriteLine($"Match found {matchId}");
            currentMatchInfo.MatchId = matchId;
            currentMatchInfo.GamePhase = phase;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    private async Task JoinQueue()
    {
        if (hubConnection is not null)
        {
            isQueued = true;
            StateHasChanged();
            await hubConnection.SendAsync("JoinQueue", username);
        }
    }



    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}