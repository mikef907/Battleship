@page "/"
@using Battleship.WASM.Shared

@inject NavigationManager NavigationManager
@implements IAsyncDisposable


<PageTitle>Index</PageTitle>
<div class="container">
    <h1>Battleship!</h1>
    @if (gamePhase.HasValue)
    {
        <h5>Game Phase: @gamePhase.Value</h5>
    }

    @if (!currentMatchId.HasValue)
    {
        <div>
            <input @bind="username" placeholder="Username" /><button @onclick="JoinQueue" disabled="@(!IsConnected || isQueued)">Join Queue</button>
            @if (isQueued)
            {
                <p>
                    Queue joined...waiting for match

                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </p>
            }

        </div>
    }
    else
    {
        <div>
            <div class="game-grid">
                @for (var i = 0; i < 10; i++)
                {
                    @for (var j = 0; j < 10; j++)
                    {
                        var _i = i;
                        var _j = j;
                        var cellState = GetPlayerCellState(_i, _j);

                        <div dropzone="ships" id="@i-@j" class="game-grid-cell">
                            @if (cellState.Item2 is not null)
                            {
                                <div draggable title="@cellState.Item2?.Name" class="ship @cellState.Item2?.Name" 
                                    @onmousedown="() => SelectShip(_i, _j)" 
                                    @ondragstart="() => DragShipStart()">
                                </div>
                            }
                        </div>
                    }
                }
            </div>
        </div>
    }

</div>

<style>
    .game-grid {
        display: grid;
        grid-template-columns: repeat(10, 1fr);
        grid-auto-rows: 3rem;
        max-width: 40rem;
    }

    .ship {
        height:100%;
        width: 100%;
    }

    .game-grid-cell {
        border-style: groove;
        border-width: 1px;
    }

    .ship.Carrier {
        background-color: #ffbe0b;
    }

    .ship.Battleship {
        background-color: #fb5607;
    }

    .ship.Patrol_Boat {
        background-color: #ff006e;
    }

    .ship.Submarine {
        background-color: #8338ec;
    }

    .ship.Destroyer {
        background-color: #3a86ff;
    }
</style>

@code {
    private HubConnection? hubConnection;
    private Player player;
    private IShip? currentSelected;
    private List<string> messages = new List<string>();
    private GamePhase? gamePhase;
    private Guid? currentMatchId;
    private bool isQueued = false;
    private IShip?[,] playerGrid = new IShip?[10, 10];
    private IShip[] playerShips = new IShip[] { new Carrier(), new Battleship(), new Patrol_Boat(), new Submarine(), new Destroyer() };
    private string? userInput;
    private string? messageInput;
    private string? username;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .WithUrl(NavigationManager.ToAbsoluteUri("/battleshiphub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<Player>("JoinQueueResponse", (player) =>
        {
            this.player = player;
            Console.WriteLine(player);
        });

        hubConnection.On<Guid, GamePhase>("NotifyMatchFoundResponse", (matchId, phase) =>
        {
            Console.WriteLine($"Match found {matchId}");
            currentMatchId = matchId;
            gamePhase = phase;
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        InitBoard();
    }

    private void DragShipStart()
    {

    }


    private void InitBoard()
    {
        for (var i = 0; i < playerShips.Length; i++)
        {
            var placement = new Placement(new Coordinate(i, 0), Direction.Down, player);
            var coords = BattleshipHelpers.BuildWriteCoordinates(placement, playerShips[i]);

            foreach (var coord in coords)
            {
                playerGrid[coord.X, coord.Y] = playerShips[i];
            }
        }
    }

    private void SelectShip(int i, int j)
    {
        currentSelected = playerGrid[i, j];

        Console.WriteLine($"Select ship {i}, {j} {currentSelected}");
    }

    private (string, IShip?) GetPlayerCellState(int i, int j)
    {
        IShip? ship = playerGrid[i, j];

        return (ship is null ? "bg-light" : "bg-secondary", ship);
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    private async Task JoinQueue()
    {
        if (hubConnection is not null)
        {
            isQueued = true;
            StateHasChanged();
            await hubConnection.SendAsync("JoinQueue", username);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}