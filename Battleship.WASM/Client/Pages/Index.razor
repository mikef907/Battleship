@page "/"
@inject NavigationManager NavigationManager
@implements IAsyncDisposable


<PageTitle>Index</PageTitle>
<div class="container">
    <h1>Battledots!</h1>

    @if (!currentMatchInfo.MatchId.HasValue)
    {
        <div>
            <input @bind="username" placeholder="Username" /><button @onclick="JoinQueue" disabled="@(!IsConnected || isQueued)">Join Queue</button>
            @if (isQueued)
            {
                <p>
                    Queue joined...waiting for match

                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </p>
            }

        </div>
    }
    else
    {
        <CascadingValue Value="@currentMatchInfo">
            <Gameboard HubConnection="hubConnection" />
        </CascadingValue>
    }

</div>

@code {
    public CurrentMatchInfo currentMatchInfo = new CurrentMatchInfo();
    private HubConnection? hubConnection;

    private List<string> messages = new List<string>();

    private bool isQueued = false;

    private string? userInput;
    private string? messageInput;
    private string? username;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .WithUrl(NavigationManager.ToAbsoluteUri("/battleshiphub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<Player>("JoinQueueResponse", (player) =>
        {
            currentMatchInfo.Player = player;
            Console.WriteLine(player);
        });

        hubConnection.On<Guid, GamePhase>("NotifyMatchFoundResponse", (matchId, phase) =>
        {
            Console.WriteLine($"Match found {matchId}");
            currentMatchInfo.MatchId = matchId;
            currentMatchInfo.GamePhase = phase;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    private async Task JoinQueue()
    {
        if (hubConnection is not null)
        {
            isQueued = true;
            StateHasChanged();
            await hubConnection.SendAsync("JoinQueue", username);
        }
    }



    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}