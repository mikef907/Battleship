@using Battleship.WASM.Client.Models
@using Newtonsoft.Json
<CascadingValue Value="this">
    <div draggable="false" class="game-grid">
        @for (var i = 0; i < 10; i++)
        {
            @for (var j = 0; j < 10; j++)
            {
                <ShipCell X="i" Y="j" ShipModel="playerGrid[i, j]" OnDropUpdate="HandleOnDropUpdate"></ShipCell>
            }
        }
    </div>
</CascadingValue>

@if (currentMatchInfo.GamePhase == GamePhase.Setup)
{
    <button class="btn btn-outline-primary" @onclick="StartGame">Start Game</button>
}

@if (CurrentSelected is not null)
{
    <DirectionPicker OnCloseDirectionPicker="HandleDirectionPickerClose" OnDirectionChoosen="HandleDirectionPicked" PlayerGrid="playerGrid" Coordinate="dropCoordinate.Value" Target="CurrentSelected" />
}

@code {
    [CascadingParameter] protected CurrentMatchInfo currentMatchInfo { get; set; }
    [Parameter] public HubConnection HubConnection { get; set; }
    public IShip? CurrentSelected { get; set; }
    private Coordinate? dropCoordinate { get; set; }
    private IShip?[,] playerGrid = new IShip?[10, 10];
    private IDictionary<IShip, Placement?> playerShips;

    protected override void OnInitialized()
    {
        playerShips = new Dictionary<IShip, Placement?>();
        playerShips.Add(new Carrier(), null);
        playerShips.Add(new BattleShip(), null);
        playerShips.Add(new Patrol_Boat(), null);
        playerShips.Add(new Submarine(), null);
        playerShips.Add(new Destroyer(), null);
        InitBoard();
    }

    public void HandleDirectionPickerClose()
    {
        dropCoordinate = null;
        CurrentSelected = null;
    }

    public void HandleDirectionPicked(Direction direction)
    {
        if (CurrentSelected is not null)
        {
            var placement = new Placement(dropCoordinate!.Value, direction, currentMatchInfo.Player);

            var coords = BattleshipHelpers.BuildWriteCoordinates(placement, CurrentSelected);

            for (int i = 0; i < 10; i++)
                for (int j = 0; j < 10; j++)
                    if (playerGrid[i, j] == CurrentSelected)
                        playerGrid[i, j] = null;

            foreach (var coord in coords)
            {
                playerGrid[coord.X, coord.Y] = CurrentSelected;
            }

            playerShips[CurrentSelected] = placement;
        }

        CurrentSelected = null;
        dropCoordinate = null;
    }

    public void HandleOnDropUpdate(Coordinate coordinate)
    {
        dropCoordinate = coordinate;
        Console.WriteLine($"On Drop {CurrentSelected}");
    }

    private async Task StartGame()
    {
        if (HubConnection is not null)
        {
            currentMatchInfo.GamePhase = GamePhase.Main;
            StateHasChanged();
            var _playerShips = playerShips.ToDictionary(_ => _.Key.Name, _ => _.Value);
            await HubConnection.SendAsync("StartGame", currentMatchInfo.MatchId, _playerShips);
        }
    }

    private void InitBoard()
    {
        for (var i = 0; i < playerShips.Count; i++)
        {
            var ship = playerShips.ElementAt(i).Key;
            var placement = new Placement(new Coordinate(0, i), Direction.Down, currentMatchInfo.Player);
            var coords = BattleshipHelpers.BuildWriteCoordinates(placement, ship);

            foreach (var coord in coords)
            {
                playerGrid[coord.X, coord.Y] = ship;
            }

            playerShips[ship] = placement;
        }
    }
}
