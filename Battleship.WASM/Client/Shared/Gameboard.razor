@if (currentMatchInfo.GamePhase.HasValue)
{
    <h5>Game Phase: @currentMatchInfo.GamePhase</h5>

    @if (winner is not null)
    {
        if (winner == currentMatchInfo.Player)
        {
            <h4>You Win!</h4>
        }
        else
        {
            <h4>@winner.Value.Username has defeated you!</h4>
        }
    }
    <button class="btn btn-outline-dark" hidden="@(currentMatchInfo.GamePhase != GamePhase.Completed)" @onclick="Reset">Reset</button>
}


<CascadingValue Value="this">
    <div draggable="false" class="game-grid">
        @for (var i = 0; i < 10; i++)
        {
            @for (var j = 0; j < 10; j++)
            {
                <ShipCell Coordinate="new Coordinate(i, j)" ShipModel="playerGrid[i, j]" OnDropUpdate="HandleOnDropUpdate" Move="GetOppoentMove(i, j)"></ShipCell>
            }
        }
    </div>
</CascadingValue>

@if (currentMatchInfo.GamePhase == GamePhase.Setup)
{
    <button class="btn btn-outline-primary" @onclick="StartGame">Start Game</button>
}

@if (waitingForPlayer)
{
    <p>
        Waiting for opponent...

        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    </p>
}

@if (CurrentSelected is not null)
{
    <DirectionPicker OnCloseDirectionPicker="HandleDirectionPickerClose" OnDirectionChoosen="HandleDirectionPicked" PlayerGrid="playerGrid" Coordinate="dropCoordinate.Value" Target="CurrentSelected" />
}

<hr />

@if (currentMatchInfo.GamePhase == GamePhase.Main && !waitingForPlayer)
{
    <p>@(currentMatchInfo.CurrentTurn == currentMatchInfo.Player ? "Your Turn" : "Opponent's Turn")</p>
    <div draggable="false" class="game-grid opponent">
        @for (var i = 0; i < 10; i++)
        {
            @for (var j = 0; j < 10; j++)
            {
                <ResultCell Coordinate="new Coordinate(i, j)" Move="GetPlayerMove(i, j)" ShootCallback="HandleShootCallback" />
            }
        }
    </div>
    <div>
        <p>Move Log</p>
        <ul>
            @foreach (var move in Moves)
            {
                <li>@move.Player.Username @move.Result at coordinate @move.Coordinate.X, @move.Coordinate.Y</li>
            }
        </ul>
    </div>
}


@code {
    [CascadingParameter] protected CurrentMatchInfo currentMatchInfo { get; set; }
    [Parameter] public HubConnection HubConnection { get; set; }
    [Parameter] public EventCallback ResetCallback { get; set; }
    public IShip? CurrentSelected { get; set; }
    private Coordinate? dropCoordinate { get; set; }
    private IShip?[,] playerGrid = new IShip?[10, 10];
    private Result?[,] resultGrid = new Result?[10, 10];
    private IDictionary<IShip, Placement?> playerShips;
    public IEnumerable<Move> Moves = Enumerable.Empty<Move>();
    private bool waitingForPlayer { get; set; } = false;
    private Player? winner;

    protected Move? GetPlayerMove(int x, int y) => Moves.SingleOrDefault(_ => _.Player == currentMatchInfo.Player && _.Coordinate == new Coordinate(x, y));

    protected Move? GetOppoentMove(int x, int y) => Moves.SingleOrDefault(_ => _.Player != currentMatchInfo.Player && _.Coordinate == new Coordinate(x, y));

    protected override void OnInitialized()
    {
        playerShips = new Dictionary<IShip, Placement?>();
        playerShips.Add(new Carrier(), null);
        playerShips.Add(new BattleShip(), null);
        playerShips.Add(new Patrol_Boat(), null);
        playerShips.Add(new Submarine(), null);
        playerShips.Add(new Destroyer(), null);
        InitBoard();

        HubConnection.On<Player?>("NotifyGameStarted", currentPlayerTurn =>
        {
            currentMatchInfo.CurrentTurn = currentPlayerTurn;

            if (currentMatchInfo.CurrentTurn is not null)
            {
                currentMatchInfo.GamePhase = GamePhase.Main;
                waitingForPlayer = false;
            }

            StateHasChanged();
        });

        HubConnection.On<Player, IEnumerable<Move>>("NotifyShotResult", (playerAttacked, moves) =>
        {
            Moves = moves;
            currentMatchInfo.CurrentTurn = playerAttacked;
            StateHasChanged();
        });

        HubConnection.On<Player>("NotifyMatchFinished", winner =>
        {
            currentMatchInfo.GamePhase = GamePhase.Completed;
            this.winner = winner;
            StateHasChanged();
        });
    }

    public async Task Reset()
    {
        await ResetCallback.InvokeAsync();
    }

    public void HandleShootCallback(Coordinate coordinate)
    {
        HubConnection.InvokeAsync("Shoot", currentMatchInfo, coordinate);
    }

    public void HandleDirectionPickerClose()
    {
        dropCoordinate = null;
        CurrentSelected = null;
    }

    public void HandleDirectionPicked(Direction direction)
    {
        if (CurrentSelected is not null)
        {
            var placement = new Placement(dropCoordinate!.Value, direction, currentMatchInfo.Player);

            var coords = BattleshipHelpers.BuildWriteCoordinates(placement, CurrentSelected);

            for (int i = 0; i < 10; i++)
                for (int j = 0; j < 10; j++)
                    if (playerGrid[i, j] == CurrentSelected)
                        playerGrid[i, j] = null;

            foreach (var coord in coords)
            {
                playerGrid[coord.X, coord.Y] = CurrentSelected;
            }

            playerShips[CurrentSelected] = placement;
        }

        CurrentSelected = null;
        dropCoordinate = null;
    }

    public void HandleOnDropUpdate(Coordinate coordinate)
    {
        dropCoordinate = coordinate;
    }

    private async Task StartGame()
    {
        if (HubConnection is not null)
        {
            var _playerShips = playerShips.ToDictionary(_ => _.Key.Name, _ => _.Value);
            await HubConnection.SendAsync("StartGame", currentMatchInfo.MatchId, _playerShips);
            waitingForPlayer = true;
            StateHasChanged();
        }
    }

    private void InitBoard()
    {
        for (var i = 0; i < playerShips.Count; i++)
        {
            var ship = playerShips.ElementAt(i).Key;
            var placement = new Placement(new Coordinate(0, i), Direction.Down, currentMatchInfo.Player);
            var coords = BattleshipHelpers.BuildWriteCoordinates(placement, ship);

            foreach (var coord in coords)
            {
                playerGrid[coord.X, coord.Y] = ship;
            }

            playerShips[ship] = placement;
        }
    }
}
