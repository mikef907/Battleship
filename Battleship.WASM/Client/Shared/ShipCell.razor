@inject IJSRuntime JS

<div id="@Coordinate.X-@Coordinate.Y" draggable="false" dropzone="true" class="game-grid-cell @dropClass"
     ondragover="event.preventDefault();"
     ondragstart="event.dataTransfer.setData('', event.target.id);"
     @ondrop="HandleDrop"
     @ondragenter="HandleDragEnter"
     @ondragleave="HandleDragLeave"
     @ontouchmove:preventDefault="true"
     @ontouchcancel:preventDefault="true"
     @ontouchcancel:stopPropagation="true"
     @ontouchmove:stopPropagation="true"
     @ontouchenter="HandleDragEnter"
     @ontouchleave="HandleDragLeave"
     @ontouchend="(TouchEventArgs args) => HandleTouchDrop(args)">
    @if (ShipModel is not null)
    {
        <ShipGamePiece ShipModel="ShipModel" Move="Move" />
    }
    @if (Move?.Result == Result.Miss)
    {
        <i class="bi bi-circle" style="font-size: 24px; text-align: center;"></i>
    }

</div>

@code {
    [Parameter] public Coordinate Coordinate { get; set; }
    [Parameter] public IShip? ShipModel { get; set; }
    [Parameter] public EventCallback<Coordinate> OnDropUpdate { get; set; }
    [Parameter] public Move? Move { get; set; }
    [CascadingParameter] protected Gameboard gameboard { get; set; }
    [CascadingParameter] protected CurrentMatchInfo currentMatchInfo { get; set; }

    private string? dropClass;

    private async void HandleDrop()
    {
        if (ShipModel is null || ShipModel == gameboard.CurrentSelected)
        {
            await OnDropUpdate.InvokeAsync(Coordinate);
        }

        dropClass = string.Empty;
    }

    private async void HandleTouchDrop(TouchEventArgs args)
    {
        var changedTouched = args.ChangedTouches.First();

        var el = await JS.InvokeAsync<string>("getCoordinateFromGrid", changedTouched.ClientX, changedTouched.ClientY);

        if (el is not null)
        {
            var chars = el.Split('-');
            await OnDropUpdate.InvokeAsync(new Coordinate(int.Parse(chars[0]), int.Parse(chars[1])));
        }

        dropClass = string.Empty;
    }

    private void HandleDragEnter()
    {
        if (currentMatchInfo.GamePhase == GamePhase.Setup)
        {
            if (ShipModel is null || ShipModel == gameboard.CurrentSelected)
            {
                dropClass = "can-drop";
            }
            else
            {
                dropClass = "no-drop";
            }
        }
    }

    private void HandleDragLeave()
    {
        dropClass = string.Empty;
    }
}
