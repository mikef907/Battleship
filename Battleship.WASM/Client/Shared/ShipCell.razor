<div draggable="false" class="game-grid-cell @dropClass"
     ondragover="event.preventDefault();"
     ondragstart="event.dataTransfer.setData('', event.target.id);"
     @ondrop="HandleDrop"
     @ondragenter="HandleDragEnter"
     @ondragleave="HandleDragLeave">
    @if (ShipModel is not null)
    {
        <ShipGamePiece ShipModel="ShipModel" />
    }
    @if (gameboard.Moves.Any(_ => _.Item1 != currentMatchInfo.Player && _.Item2 == Coordinate))
    {
        var result = gameboard.Moves.Single(_ => _.Item1 != currentMatchInfo.Player && _.Item2 == Coordinate);

        if (result.Item3 == Result.Hit)
        {
            <i class="bi-alarm"></i>
        }
        else
        {
            <i class="bi-alarm"></i>
        }

    }

</div>

@code {
    [Parameter] public Coordinate Coordinate { get; set; }
    [Parameter] public IShip? ShipModel { get; set; }
    [Parameter] public EventCallback<Coordinate> OnDropUpdate { get; set; }
    [CascadingParameter] protected Gameboard gameboard { get; set; }
    [CascadingParameter] protected CurrentMatchInfo currentMatchInfo { get; set; }

    private string? dropClass;

    private async void HandleDrop()
    {
        Console.WriteLine("drop");

        if (ShipModel is null || ShipModel == gameboard.CurrentSelected)
        {
            await OnDropUpdate.InvokeAsync(Coordinate);
        }

        dropClass = string.Empty;
    }

    private void HandleDragEnter()
    {
        if (currentMatchInfo.GamePhase == GamePhase.Setup)
        {
            if (ShipModel is null || ShipModel == gameboard.CurrentSelected)
            {
                dropClass = "can-drop";
            }
            else
            {
                dropClass = "no-drop";
            }
        }
    }

    private void HandleDragLeave()
    {
        Console.WriteLine("Drag leave");
        dropClass = "";
    }
}
